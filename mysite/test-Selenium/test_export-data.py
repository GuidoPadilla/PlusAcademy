# Generated by Selenium IDE
# Test exporting data in different files
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestExportdata():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_exportdata(self):
    # Test name: export_data
    # Step # | name | target | value
    # 1 | open | /pagos/control/ | 
    self.driver.get("https://plus-academy.herokuapp.com/pagos/control/")
    # 2 | setWindowSize | 1258x718 | 
    self.driver.set_window_size(1258, 718)
    # 3 | click | linkText=Control de Pagos | 
    self.driver.find_element(By.LINK_TEXT, "Control de Pagos").click()
    # 4 | click | css=.buttons-print > span | 
    self.vars["window_handles"] = self.driver.window_handles
    # 5 | storeWindowHandle | root | 
    self.driver.find_element(By.CSS_SELECTOR, ".buttons-print > span").click()
    # 6 | selectWindow | handle=${win3179} | 
    self.vars["win3179"] = self.wait_for_window(2000)
    # 7 | close |  | 
    self.vars["root"] = self.driver.current_window_handle
    # 8 | selectWindow | handle=${root} | 
    self.driver.switch_to.window(self.vars["win3179"])
    # 9 | click | css=.buttons-pdf | 
    self.driver.close()
    # 10 | click | css=.buttons-excel > span | 
    self.driver.switch_to.window(self.vars["root"])
    # 11 | click | css=.buttons-csv > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".buttons-pdf").click()
    # 12 | click | css=.buttons-copy > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".buttons-excel > span").click()
    self.driver.find_element(By.CSS_SELECTOR, ".buttons-csv > span").click()
    self.driver.find_element(By.CSS_SELECTOR, ".buttons-copy > span").click()
  
